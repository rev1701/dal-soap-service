//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExamAssessmentDaal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamAssessmentEntities : DbContext
    {
        public ExamAssessmentEntities()
            : base("name=ExamAssessmentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answer { get; set; }
        public virtual DbSet<Categories> Categories { get; set; }
        public virtual DbSet<Categories_Subtopic> Categories_Subtopic { get; set; }
        public virtual DbSet<ExamQuestion> ExamQuestion { get; set; }
        public virtual DbSet<ExamQuestion_Categories> ExamQuestion_Categories { get; set; }
        public virtual DbSet<ExamQuestionList> ExamQuestionList { get; set; }
        public virtual DbSet<ExamTemplate> ExamTemplate { get; set; }
        public virtual DbSet<ExamTemplateQuestions> ExamTemplateQuestions { get; set; }
        public virtual DbSet<ExamType> ExamType { get; set; }
        public virtual DbSet<LanguageType> LanguageType { get; set; }
        public virtual DbSet<Question> Question { get; set; }
        public virtual DbSet<QuestionAnswers> QuestionAnswers { get; set; }
        public virtual DbSet<QuestionType> QuestionType { get; set; }
        public virtual DbSet<Subject> Subject { get; set; }
        public virtual DbSet<Subject_Categories> Subject_Categories { get; set; }
        public virtual DbSet<Subtopic> Subtopic { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<FullExamTemplateInfo> FullExamTemplateInfo { get; set; }
        public virtual DbSet<VWFullQuestionInfo> VWFullQuestionInfo { get; set; }
        public virtual DbSet<VWQuestionCategories> VWQuestionCategories { get; set; }
        public virtual DbSet<VWSubjectInfo> VWSubjectInfo { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spAddExistingCategory_Result> spAddExistingCategory(string subject, string category, ObjectParameter result)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddExistingCategory_Result>("spAddExistingCategory", subjectParameter, categoryParameter, result);
        }
    
        public virtual ObjectResult<spAddExistingSubtopicToCategory_Result> spAddExistingSubtopicToCategory(string subtopic, string category, ObjectParameter result)
        {
            var subtopicParameter = subtopic != null ?
                new ObjectParameter("Subtopic", subtopic) :
                new ObjectParameter("Subtopic", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddExistingSubtopicToCategory_Result>("spAddExistingSubtopicToCategory", subtopicParameter, categoryParameter, result);
        }
    
        public virtual ObjectResult<spAddNewCategoryType_Result> spAddNewCategoryType(string subject, string category, ObjectParameter result)
        {
            var subjectParameter = subject != null ?
                new ObjectParameter("Subject", subject) :
                new ObjectParameter("Subject", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddNewCategoryType_Result>("spAddNewCategoryType", subjectParameter, categoryParameter, result);
        }
    
        public virtual ObjectResult<spAddQuestionAsExamQuestion_Result> spAddQuestionAsExamQuestion(string examQuestionID, Nullable<int> questionID, string name, Nullable<int> questionType, ObjectParameter result)
        {
            var examQuestionIDParameter = examQuestionID != null ?
                new ObjectParameter("ExamQuestionID", examQuestionID) :
                new ObjectParameter("ExamQuestionID", typeof(string));
    
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var questionTypeParameter = questionType.HasValue ?
                new ObjectParameter("QuestionType", questionType) :
                new ObjectParameter("QuestionType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddQuestionAsExamQuestion_Result>("spAddQuestionAsExamQuestion", examQuestionIDParameter, questionIDParameter, nameParameter, questionTypeParameter, result);
        }
    
        public virtual ObjectResult<spAddQuestionCategories_Result> spAddQuestionCategories(string categories, Nullable<int> pKID, Nullable<int> result)
        {
            var categoriesParameter = categories != null ?
                new ObjectParameter("Categories", categories) :
                new ObjectParameter("Categories", typeof(string));
    
            var pKIDParameter = pKID.HasValue ?
                new ObjectParameter("PKID", pKID) :
                new ObjectParameter("PKID", typeof(int));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddQuestionCategories_Result>("spAddQuestionCategories", categoriesParameter, pKIDParameter, resultParameter);
        }
    
        public virtual ObjectResult<spAddQuestionToAnswer_Result> spAddQuestionToAnswer(Nullable<int> questionID, Nullable<int> answerID, Nullable<bool> isCorrect, ObjectParameter result)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerIDParameter = answerID.HasValue ?
                new ObjectParameter("AnswerID", answerID) :
                new ObjectParameter("AnswerID", typeof(int));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("isCorrect", isCorrect) :
                new ObjectParameter("isCorrect", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddQuestionToAnswer_Result>("spAddQuestionToAnswer", questionIDParameter, answerIDParameter, isCorrectParameter, result);
        }
    
        public virtual ObjectResult<spAddQuestionToExam_Result> spAddQuestionToExam(string examID, string examQuestionID, Nullable<int> weight, ObjectParameter result)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(string));
    
            var examQuestionIDParameter = examQuestionID != null ?
                new ObjectParameter("ExamQuestionID", examQuestionID) :
                new ObjectParameter("ExamQuestionID", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("weight", weight) :
                new ObjectParameter("weight", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddQuestionToExam_Result>("spAddQuestionToExam", examIDParameter, examQuestionIDParameter, weightParameter, result);
        }
    
        public virtual ObjectResult<spAddSubtopicType_Result> spAddSubtopicType(string subtopic, string category, ObjectParameter result)
        {
            var subtopicParameter = subtopic != null ?
                new ObjectParameter("Subtopic", subtopic) :
                new ObjectParameter("Subtopic", typeof(string));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAddSubtopicType_Result>("spAddSubtopicType", subtopicParameter, categoryParameter, result);
        }
    
        public virtual ObjectResult<spDeleteQuestionCategory_Result> spDeleteQuestionCategory(string categories, string examQuestionID, ObjectParameter result)
        {
            var categoriesParameter = categories != null ?
                new ObjectParameter("Categories", categories) :
                new ObjectParameter("Categories", typeof(string));
    
            var examQuestionIDParameter = examQuestionID != null ?
                new ObjectParameter("ExamQuestionID", examQuestionID) :
                new ObjectParameter("ExamQuestionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spDeleteQuestionCategory_Result>("spDeleteQuestionCategory", categoriesParameter, examQuestionIDParameter, result);
        }
    
        public virtual ObjectResult<spRemoveAnswerFromQuestion_Result> spRemoveAnswerFromQuestion(Nullable<int> questionID, Nullable<int> answerID, ObjectParameter result)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var answerIDParameter = answerID.HasValue ?
                new ObjectParameter("AnswerID", answerID) :
                new ObjectParameter("AnswerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRemoveAnswerFromQuestion_Result>("spRemoveAnswerFromQuestion", questionIDParameter, answerIDParameter, result);
        }
    
        public virtual ObjectResult<string> spRemoveCategory(string categoryName, ObjectParameter result)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spRemoveCategory", categoryNameParameter, result);
        }
    
        public virtual ObjectResult<spRemoveQuestionAsExamQuestion_Result> spRemoveQuestionAsExamQuestion(string examQuestionID, Nullable<int> result)
        {
            var examQuestionIDParameter = examQuestionID != null ?
                new ObjectParameter("ExamQuestionID", examQuestionID) :
                new ObjectParameter("ExamQuestionID", typeof(string));
    
            var resultParameter = result.HasValue ?
                new ObjectParameter("result", result) :
                new ObjectParameter("result", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRemoveQuestionAsExamQuestion_Result>("spRemoveQuestionAsExamQuestion", examQuestionIDParameter, resultParameter);
        }
    
        public virtual ObjectResult<spRemoveQuestionFromExam_Result> spRemoveQuestionFromExam(string examID, string examQuestionID, ObjectParameter result)
        {
            var examIDParameter = examID != null ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(string));
    
            var examQuestionIDParameter = examQuestionID != null ?
                new ObjectParameter("ExamQuestionID", examQuestionID) :
                new ObjectParameter("ExamQuestionID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spRemoveQuestionFromExam_Result>("spRemoveQuestionFromExam", examIDParameter, examQuestionIDParameter, result);
        }
    }
}
